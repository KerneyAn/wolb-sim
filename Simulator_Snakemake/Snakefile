configfile: "config/config.yaml"

include: "rules/common.smk"

ERROR_VAR = 0

def find_files(wc):
    f = checkpoints.run_simpy.get().output[0]
    file_name = []
    with open("file_names.txt", "r") as file:
        file_name = file.read().splitlines()
    return expand("simulated_reads/{swapped_genome}_sim.{rn}", swapped_genome = file_name,
        rn=["bfast.fastq.gz","bwa.read1.fastq.gz", "bwa.read2.fastq.gz", "mutations.vcf", "mutations.txt"]) 


ruleorder:
    run_simpy > sim_Genomes 
rule all:
    input: 
        find_files

checkpoint run_simpy:
    output:
        "file_names.txt"
    conda:
        "envs/env.yaml"
    script:
        "sim.py"

rule sim_Genomes:
    input:
        "mixed_blocks/{swapped_genome}.fa",
    output:
        out = "simulated_reads/{swapped_genome}_sim.bfast.fastq.gz",
        read1 = "simulated_reads/{swapped_genome}_sim.bwa.read1.fastq.gz",
        read2 = "simulated_reads/{swapped_genome}_sim.bwa.read2.fastq.gz",
        mut = "simulated_reads/{swapped_genome}_sim.mutations.vcf",
        mut_txt = "simulated_reads/{swapped_genome}_sim.mutations.txt"	
    params:
        error_rate = ERROR_VAR,
        out_name = "simulated_reads/{swapped_genome}_sim"
    conda:
        "envs/env.yaml"
    shell:
        """
        dwgsim -N 10000 -1 150 -2 150 -H -y 0 -e {params.error_rate} -E {params.error_rate} -r 0 -F 0 {input} {params.out_name}
        """

rule extractRead1:
    input:
        "simulated_reads/{swapped_genome}_sim.bwa.read1.fastq.gz"
    output:
        "simulated_reads/{swapped_genome}_sim.bwa.read1.fastq"
    shell:
        """
        gunzip {input}
        """

# # TODO: Have to unzip read 1, then pass it to the python script 
# rule check_blocks:
#     input:
#         "simulated_reads/{swapped_genome}_sim.bwa.read1.fastq"
#     output:
#         possible_recomb.txt
#     conda:
#         "envs/env.yaml"
#     script:
#         "recomb_check.py"

